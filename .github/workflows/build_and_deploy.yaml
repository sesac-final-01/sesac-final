name: Django CI

on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/build_and_deploy.yaml'
      - 'final_project/**'
      - '!final_project/templates/**'
      - '!final_project/templates_local/**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

        # aws 자격 증명
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

        # .env 파일 생성
      - name: Create .env file
        run: |
          cd final_project
          touch .env
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          cat .env

        # 구동에 필요한 모든 패키지 설치
      - name: Install dependencies
        run: |
          cd final_project
          sudo apt-get update
          python -m pip install --upgrade pip
          pip install -r requirements.txt

        # 구동 테스트
      - name: Run migrate
        run: |
          cd final_project
          python manage.py makemigrations --settings=final_project.settings.prod
          python manage.py migrate --settings=final_project.settings.prod

      - name: Run tests
        run: |
          cd final_project
          ls -al
          python manage.py runserver 0.0.0.0:8000 --settings=final_project.settings.prod --noreload &

        # Docker 이미지 빌드
      - name: Build Docker Image
        run: |
          cd final_project
          pwd
          ls -al
          docker build -t jiwooum/sugangsite:latest  .

        # Docker Hub 로그인
      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}

        # Docker 이미지를 Docker Hub로 push
      - name: Push Docker Image to Docker Hub
        run: docker push jiwooum/sugangsite:latest

#  deploy:
#    runs-on: ubuntu-latest
#    needs: build
#
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v2
#
#      - name: user change
#        run: sudo su -
#
#      # aws 자격증명 - EKS 노드그룹 생성자 권한 필요
#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v2
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ap-northeast-2
#
#      # Kubernetes 구성 설정
#      - name: Configure Kubernetes
#        run: |
#          aws eks --region ap-northeast-2 update-kubeconfig --name sesac-eks-cls --kubeconfig ~/.kube/config
#
#    # LB 서비스 생성(이미 있는 경우 생략)
#     - name: Create Service if not exists
#        run: |
#          kubectl apply -f service.yaml || echo "Service already exists"
#
#      # EKS 배포 - scale doewn & scale up
#      - name: Scale down Deployment
#        run: |
#          kubectl scale deployment project-app --replicas=0
#
#      - name: Scale up Deployment
#        run: |
#          kubectl scale deployment project-app --replicas=2


#    # 블루-그립 배포 전략 적용
#     - name: Blue-Green Deployment
#        run: |
#          BLUE_DEPLOYMENT=project-app-blue
#          GREEN_DEPLOYMENT=project-app-green
#          SERVICE_NAME=sesac-alb
#          ACTIVE_COLOR=$(kubectl get svc $SERVICE_NAME -o jsonpath='{.spec.selector.color}')
#          INACTIVE_COLOR=$(if [ "$ACTIVE_COLOR" == "blue"; then echo "green"; else echo "blue"; fi)
#
#          kubectl set image deployment/${INACTIVE_COLOR}-deployment project-app=jiwooum/sugangsite:latest
#
#          kubectl rollout status deployment/${INACTIVE_COLOR}-deployment
#
#          kubectl patch svc $SERVICE_NAME -p "{\"spec\":{\"selector\":{\"color\":\"$INACTIVE_COLOR\"}}}"
#
#          kubectl scale deployment/${ACTIVE_COLOR}-deployment --replicas=0
#
#          kubectl rollout status deployment/${ACTIVE_COLOR}-deployment